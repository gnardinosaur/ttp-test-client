{"ast":null,"code":"var _jsxFileName = \"/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/UserStocks.js\";\nimport React from 'react';\nimport { List, Container, Grid, Header } from 'semantic-ui-react';\nimport { formatter } from '../constants/formatCurrency';\n\nclass UserStocks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userStocks: [],\n      summedArray: []\n    };\n\n    this.buildUserStockObject = () => {\n      //create a simple object --> {ticker: number of shares}\n      const tickersAndQtyObject = {};\n      this.state.userStocks.forEach(el => {\n        if (tickersAndQtyObject[el.ticker]) {\n          tickersAndQtyObject[el.ticker] += el.num_shares;\n        } else {\n          tickersAndQtyObject[el.ticker] = el.num_shares;\n        }\n      }); //convert the object back to an array with summed number of shares owned by that user \n\n      const summedArray = Object.entries(tickersAndQtyObject);\n      this.setState({\n        summedArray\n      });\n    };\n\n    this.portfolioTotal = () => {\n      this.state.summedArray.map(el => {\n        this.props.currentPrices[el[0]].lastPrice * el[1];\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/api/v1/users/${this.props.user.id}/transactions`).then(resp => resp.json()).then(userStocks => this.setState({\n      userStocks\n    }, () => this.buildUserStockObject()));\n  }\n\n  render() {\n    //map through user's stocks and count and return array containing components to render - each component contains a) ticker, b) # shares, and c) qty * current price \n    const stockList = this.state.summedArray.map((el, index) => {\n      //change color of text based on lastPrice and PreviousClose --> if lastPrice > PrevClose then green text, if lastPrice < prevClose red text, otherwise gray text\n      let currentPrice;\n\n      if (this.props.currentPrices[el[0]].lastPrice > this.props.currentPrices[el[0]].prevClose) {\n        currentPrice = React.createElement(\"p\", {\n          style: {\n            color: 'green'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1]));\n      } else if (this.props.currentPrices[el[0]].lastPrice === this.props.currentPrices[el[0]].prevClose) {\n        currentPrice = React.createElement(\"p\", {\n          style: {\n            color: 'gray'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1]));\n      } else {\n        currentPrice = React.createElement(\"p\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1]));\n      }\n\n      return React.createElement(List.Item, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        columns: 3,\n        divided: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, el[0])), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, el[1], \" Shares\"), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, currentPrice))));\n    }); //this is the render return \n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(List, {\n      divided: true,\n      relaxed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, stockList));\n  }\n\n}\n\n;\nexport default UserStocks;","map":{"version":3,"sources":["/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/UserStocks.js"],"names":["React","List","Container","Grid","Header","formatter","UserStocks","Component","state","userStocks","summedArray","buildUserStockObject","tickersAndQtyObject","forEach","el","ticker","num_shares","Object","entries","setState","portfolioTotal","map","props","currentPrices","lastPrice","componentDidMount","fetch","user","id","then","resp","json","render","stockList","index","currentPrice","prevClose","color","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { List, Container, Grid, Header } from 'semantic-ui-react';\nimport { formatter } from '../constants/formatCurrency';\n\nclass UserStocks extends React.Component {\n\n  state = {\n    userStocks: [],\n    summedArray: []\n  }\n\n  componentDidMount(){\n    fetch(`http://localhost:3000/api/v1/users/${this.props.user.id}/transactions`)\n    .then(resp => resp.json())\n    .then(userStocks => this.setState({ userStocks }, () => this.buildUserStockObject()))\n  };\n\n  buildUserStockObject = () => {\n    //create a simple object --> {ticker: number of shares}\n    const tickersAndQtyObject = {};\n    this.state.userStocks.forEach(el => {\n      if(tickersAndQtyObject[el.ticker]){\n        tickersAndQtyObject[el.ticker] += el.num_shares\n      } else {\n        tickersAndQtyObject[el.ticker] = el.num_shares;\n      }\n    })\n    //convert the object back to an array with summed number of shares owned by that user \n    const summedArray = Object.entries(tickersAndQtyObject)\n    this.setState({ summedArray })\n  }\n\n  portfolioTotal = () => {\n    this.state.summedArray.map(el => {\n      this.props.currentPrices[el[0]].lastPrice * el[1]\n    })\n  }\n\n  render(){\n    \n    //map through user's stocks and count and return array containing components to render - each component contains a) ticker, b) # shares, and c) qty * current price \n    const stockList = this.state.summedArray.map((el, index) => {\n      //change color of text based on lastPrice and PreviousClose --> if lastPrice > PrevClose then green text, if lastPrice < prevClose red text, otherwise gray text\n      let currentPrice;\n      if(this.props.currentPrices[el[0]].lastPrice > this.props.currentPrices[el[0]].prevClose) {\n        currentPrice = <p style={{ color: 'green' }}>{formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1])}</p>\n      } else if (this.props.currentPrices[el[0]].lastPrice === this.props.currentPrices[el[0]].prevClose) {\n        currentPrice = <p style={{ color: 'gray' }}>{formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1])}</p>\n      } else {\n        currentPrice = <p style={{ color: 'red' }}>{formatter.format(this.props.currentPrices[el[0]].lastPrice * el[1])}</p>\n      }\n      return (\n        <List.Item key={index}>\n        <Grid columns={3} divided>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as='h4'>{el[0]}</Header>\n            </Grid.Column>\n            <Grid.Column>\n              {el[1]} Shares\n            </Grid.Column>\n            <Grid.Column>\n              {currentPrice}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        </List.Item>\n      )\n    });\n    //this is the render return \n    return(\n      <Container>\n        {/* render list of user's stocks */}\n        <List divided relaxed> \n          {stockList}\n        </List>\n      </Container>\n    )\n  }\n\n};\n\nexport default UserStocks;\n"]},"metadata":{},"sourceType":"module"}