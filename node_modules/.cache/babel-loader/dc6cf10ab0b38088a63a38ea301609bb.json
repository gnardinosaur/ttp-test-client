{"ast":null,"code":"var _jsxFileName = \"/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js\";\nimport React from 'react';\nimport { Header, List, Container, Grid, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n\n    this.componentDidMount = () => {\n      fetch('http://localhost:3000/api/v1/stocks').then(resp => resp.json()).then(stocksObject => this.saveStockData(stocksObject));\n    };\n\n    this.saveStockData = stocksObject => {\n      this.setState({\n        stocks: stocksObject,\n        error: false\n      });\n    };\n\n    this.handleSelect = (e, data) => {\n      this.setState({\n        buy: { ...this.state.buy,\n          ticker: data.value\n        },\n        error: false\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        buy: { ...this.state.buy,\n          qty: e.target.value\n        }\n      });\n    };\n\n    this.buyStockOrThrowError = () => {\n      //if qty * current stock price < user.cash then fetch, otherwise throw error  \n      const stockPrice = this.state.stocks[this.state.buy.ticker];\n      const totalPurchasePrice = formatter.format(this.state.buy.qty * stockPrice);\n\n      if (totalPurchasePrice < this.props.user.cash) {\n        this.purchaseStock();\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.purchaseStock = () => {\n      const stockPrice = this.state.stocks[this.state.buy.ticker];\n      fetch('http://localhost:3000/api/v1/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          stock: this.state.buy,\n          price: stockPrice,\n          user_id: this.props.user.id\n        })\n      }).then(resp => resp.json()).then(newTransaction => {\n        this.setState({\n          userStocks: [...this.state.userStocks, newTransaction],\n          buy: {\n            ticker: '',\n            qty: 0\n          }\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      relaxed: \"very\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(List, {\n      divided: true,\n      relaxed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Cash - \", formatter.format(this.props.user.cash)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.buyStockOrThrowError,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      onChange: this.handleSelect,\n      placeholder: \"Ticker\",\n      clearable: true,\n      selection: true,\n      options: tickers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"qty\",\n      type: \"number\",\n      min: 0,\n      placeholder: \"Qty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"buy-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Buy\"), React.createElement(Message, {\n      error: true,\n      header: \"You Need More Cash!\",\n      content: \"Try a smaller amount or shares.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default PurchaseStocks;","map":{"version":3,"sources":["/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js"],"names":["React","Header","List","Container","Grid","Form","Button","Dropdown","Message","tickers","formatter","PurchaseStocks","Component","state","error","componentDidMount","fetch","then","resp","json","stocksObject","saveStockData","setState","stocks","handleSelect","e","data","buy","ticker","value","handleChange","qty","target","buyStockOrThrowError","stockPrice","totalPurchasePrice","format","props","user","cash","purchaseStock","method","headers","body","JSON","stringify","stock","price","user_id","id","newTransaction","userStocks","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Header, List, Container, Grid, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n\n  state = {\n    error: false\n  };\n\n  componentDidMount = () => {\n    fetch('http://localhost:3000/api/v1/stocks')\n    .then(resp => resp.json())\n    .then(stocksObject => this.saveStockData(stocksObject))\n  };\n\n  saveStockData = (stocksObject) => {\n    this.setState({\n      stocks: stocksObject,\n      error: false\n    });\n  };\n\n  handleSelect = (e, data) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        ticker: data.value\n      },\n      error: false\n    })\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        qty: e.target.value\n      }\n    })\n  }\n\n  buyStockOrThrowError = () => {\n    //if qty * current stock price < user.cash then fetch, otherwise throw error  \n    const stockPrice = this.state.stocks[this.state.buy.ticker];\n    const totalPurchasePrice = formatter.format(this.state.buy.qty * stockPrice);\n    \n    if(totalPurchasePrice < this.props.user.cash) {\n      this.purchaseStock()\n    } else {\n      this.setState({ error: true })\n    }\n  }\n\n  purchaseStock = () => {\n    const stockPrice = this.state.stocks[this.state.buy.ticker];\n    fetch('http://localhost:3000/api/v1/transactions',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        stock: this.state.buy,\n        price: stockPrice,\n        user_id: this.props.user.id\n      })\n    })\n    .then(resp => resp.json())\n    .then(newTransaction => {\n      this.setState({\n        userStocks: [...this.state.userStocks, newTransaction],\n        buy: {\n          ticker: '',\n          qty: 0\n        }\n      })\n    })\n  }\n\n  render(){\n    return (\n      <Container>\n        <Grid columns={2} divided relaxed='very'>\n          <Grid.Row>\n            <Grid.Column>\n              <List divided relaxed>\n                {/* list of stocks go here */}\n              </List>\n            </Grid.Column>\n            <Grid.Column width={5}>\n              <Header as='h3' textAlign='left'>Cash - {formatter.format(this.props.user.cash)}</Header>\n              <br />\n              \n              <Form onSubmit={this.buyStockOrThrowError} error={this.state.error}>\n                <Form.Field>\n                  <Dropdown onChange={this.handleSelect} placeholder='Ticker' clearable selection options={tickers} />\n                </Form.Field>\n                <Form.Field onChange={this.handleChange} >\n                  <input name='qty' type='number' min={0} placeholder='Qty' />\n              </Form.Field>\n              <Button className='buy-btn' type='submit'>Buy</Button>\n              <Message\n                error\n                header='You Need More Cash!'\n                content='Try a smaller amount or shares.'\n              />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    )\n  }\n}\n\nexport default PurchaseStocks"]},"metadata":{},"sourceType":"module"}