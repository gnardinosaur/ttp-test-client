{"ast":null,"code":"var _jsxFileName = \"/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js\";\nimport React from 'react';\nimport { Header, Container, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      buy: {\n        ticker: '',\n        qty: ''\n      },\n      error: false\n    };\n\n    this.handleSelect = (e, data) => {\n      this.setState({\n        buy: { ...this.state.buy,\n          ticker: data.value\n        },\n        error: false\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        buy: { ...this.state.buy,\n          qty: e.target.value\n        }\n      });\n    };\n\n    this.buyStockOrThrowError = () => {\n      //if qty * current stock price < user.cash then fetch, otherwise throw error  \n      const stockPrice = this.props.currentPrices[this.state.buy.ticker].lastPrice;\n      const totalPurchasePrice = this.state.buy.qty * stockPrice;\n\n      if (totalPurchasePrice < parseInt(this.props.user.cash || this.buy.ticker === '')) {\n        this.purchaseStock(stockPrice); //update user cash total in App's state \n\n        this.props.decreaseCash(totalPurchasePrice);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.purchaseStock = stockPrice => {\n      fetch('http://localhost:3000/api/v1/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          stock: this.state.buy,\n          price: stockPrice,\n          user_id: this.props.user.id\n        })\n      }).then(resp => resp.json()).then(this.setState({\n        buy: {\n          ticker: '',\n          qty: ''\n        }\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Cash - \", formatter.format(this.props.user.cash)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.buyStockOrThrowError,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      onChange: this.handleSelect,\n      placeholder: \"Ticker\",\n      value: this.state.buy.ticker,\n      clearable: true,\n      selection: true,\n      options: tickers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"qty\",\n      type: \"number\",\n      min: 0,\n      placeholder: \"Qty\",\n      value: this.state.buy.qty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"buy-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Buy\"), React.createElement(Message, {\n      error: true,\n      header: \"You may not have enough Cash, or :\",\n      content: \"Try a smaller amount or shares.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PurchaseStocks;","map":{"version":3,"sources":["/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js"],"names":["React","Header","Container","Form","Button","Dropdown","Message","tickers","formatter","PurchaseStocks","Component","state","buy","ticker","qty","error","handleSelect","e","data","setState","value","handleChange","target","buyStockOrThrowError","stockPrice","props","currentPrices","lastPrice","totalPurchasePrice","parseInt","user","cash","purchaseStock","decreaseCash","fetch","method","headers","body","JSON","stringify","stock","price","user_id","id","then","resp","json","render","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Header, Container, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n\n  state = {\n    buy: {\n      ticker: '',\n      qty: ''\n    },\n    error: false\n  };\n\n  handleSelect = (e, data) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        ticker: data.value\n      },\n      error: false\n    })\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        qty: e.target.value\n      }\n    })\n  }\n\n  buyStockOrThrowError = () => {\n    //if qty * current stock price < user.cash then fetch, otherwise throw error  \n    const stockPrice = this.props.currentPrices[this.state.buy.ticker].lastPrice;\n    const totalPurchasePrice = this.state.buy.qty * stockPrice;\n    \n    if(totalPurchasePrice < parseInt(this.props.user.cash || this.buy.ticker === '')) {\n      this.purchaseStock(stockPrice);\n      //update user cash total in App's state \n      this.props.decreaseCash(totalPurchasePrice);\n    } else {\n      this.setState({ error: true })\n    }\n  }\n\n  purchaseStock = (stockPrice) => {\n    fetch('http://localhost:3000/api/v1/transactions',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        stock: this.state.buy,\n        price: stockPrice,\n        user_id: this.props.user.id\n      })\n    })\n    .then(resp => resp.json())\n    .then(this.setState({\n      buy: {\n        ticker: '',\n        qty: ''\n      }\n    }))\n  }\n\n  render(){\n    return (\n      <Container>\n        <Header as='h3' textAlign='left'>Cash - {formatter.format(this.props.user.cash)}</Header>\n        <br />\n        \n        <Form onSubmit={this.buyStockOrThrowError} error={this.state.error}>\n          <Form.Field>\n            <Dropdown onChange={this.handleSelect} placeholder='Ticker' value={this.state.buy.ticker} clearable selection options={tickers} />\n          </Form.Field>\n          <Form.Field onChange={this.handleChange} >\n            <input name='qty' type='number' min={0} placeholder='Qty' value={this.state.buy.qty}/>\n        </Form.Field>\n        <Button className='buy-btn' type='submit'>Buy</Button>\n        <Message\n          error\n          header='You may not have enough Cash, or :'\n          content='Try a smaller amount or shares.'\n        />\n        </Form>\n      </Container>\n    )\n  }\n}\n\nexport default PurchaseStocks"]},"metadata":{},"sourceType":"module"}