{"ast":null,"code":"var _jsxFileName = \"/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js\";\nimport React from 'react';\nimport { Header, Container, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stocks: {},\n      buy: {\n        ticker: '',\n        qty: ''\n      },\n      error: false\n    };\n\n    this.handleSelect = (e, data) => {\n      this.setState({\n        buy: { ...this.state.buy,\n          ticker: data.value\n        },\n        error: false\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        buy: { ...this.state.buy,\n          qty: e.target.value\n        }\n      });\n    };\n\n    this.buyStockOrThrowError = () => {\n      //if qty * current stock price < user.cash then fetch, otherwise throw error  \n      const stockPrice = this.state.stocks[this.state.buy.ticker];\n      const totalPurchasePrice = formatter.format(this.state.buy.qty * stockPrice);\n\n      if (totalPurchasePrice < this.props.user.cash) {\n        this.purchaseStock();\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.purchaseStock = () => {\n      const stockPrice = this.state.stocks[this.state.buy.ticker];\n      fetch('http://localhost:3000/api/v1/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          stock: this.state.buy,\n          price: stockPrice,\n          user_id: this.props.user.id\n        })\n      }).then(resp => resp.json()).then(this.setState({\n        buy: {\n          ticker: '',\n          qty: ''\n        }\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Cash - \", formatter.format(this.props.user.cash)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.buyStockOrThrowError,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      onChange: this.handleSelect,\n      placeholder: \"Ticker\",\n      value: this.state.buy.ticker,\n      clearable: true,\n      selection: true,\n      options: tickers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"qty\",\n      type: \"number\",\n      min: 0,\n      placeholder: \"Qty\",\n      value: this.state.buy.qty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"buy-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Buy\"), React.createElement(Message, {\n      error: true,\n      header: \"You Need More Cash!\",\n      content: \"Try a smaller amount or shares.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PurchaseStocks;","map":{"version":3,"sources":["/Users/heatherschechter/Desktop/techTalentPipeline/frontend/ttp_app/src/components/PurchaseStocks.js"],"names":["React","Header","Container","Form","Button","Dropdown","Message","tickers","formatter","PurchaseStocks","Component","state","stocks","buy","ticker","qty","error","handleSelect","e","data","setState","value","handleChange","target","buyStockOrThrowError","stockPrice","totalPurchasePrice","format","props","user","cash","purchaseStock","fetch","method","headers","body","JSON","stringify","stock","price","user_id","id","then","resp","json","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Header, Container, Form, Button, Dropdown, Message } from 'semantic-ui-react';\nimport { tickers } from '../constants/tickerDropdown';\nimport { formatter } from '../constants/formatCurrency';\n\nclass PurchaseStocks extends React.Component {\n\n  state = {\n    stocks: {},\n    buy: {\n      ticker: '',\n      qty: ''\n    },\n    error: false\n  };\n\n  handleSelect = (e, data) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        ticker: data.value\n      },\n      error: false\n    })\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      buy: {\n        ...this.state.buy,\n        qty: e.target.value\n      }\n    })\n  }\n\n  buyStockOrThrowError = () => {\n    //if qty * current stock price < user.cash then fetch, otherwise throw error  \n    const stockPrice = this.state.stocks[this.state.buy.ticker];\n    const totalPurchasePrice = formatter.format(this.state.buy.qty * stockPrice);\n    \n    if(totalPurchasePrice < this.props.user.cash) {\n      this.purchaseStock()\n    } else {\n      this.setState({ error: true })\n    }\n  }\n\n  purchaseStock = () => {\n    const stockPrice = this.state.stocks[this.state.buy.ticker];\n    fetch('http://localhost:3000/api/v1/transactions',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        stock: this.state.buy,\n        price: stockPrice,\n        user_id: this.props.user.id\n      })\n    })\n    .then(resp => resp.json())\n    .then(this.setState({\n      buy: {\n        ticker: '',\n        qty: ''\n      }\n    }))\n  }\n\n  render(){\n    return (\n      <Container>\n        <Header as='h3' textAlign='left'>Cash - {formatter.format(this.props.user.cash)}</Header>\n        <br />\n        \n        <Form onSubmit={this.buyStockOrThrowError} error={this.state.error}>\n          <Form.Field>\n            <Dropdown onChange={this.handleSelect} placeholder='Ticker' value={this.state.buy.ticker} clearable selection options={tickers} />\n          </Form.Field>\n          <Form.Field onChange={this.handleChange} >\n            <input name='qty' type='number' min={0} placeholder='Qty' value={this.state.buy.qty}/>\n        </Form.Field>\n        <Button className='buy-btn' type='submit'>Buy</Button>\n        <Message\n          error\n          header='You Need More Cash!'\n          content='Try a smaller amount or shares.'\n        />\n        </Form>\n      </Container>\n    )\n  }\n}\n\nexport default PurchaseStocks"]},"metadata":{},"sourceType":"module"}